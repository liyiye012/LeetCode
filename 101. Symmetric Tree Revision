/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
       if(!root)
           return true;
        queue<TreeNode*> q1,q2; //notice the type of the queue is TreeNode*
        q1.push(root->left);
        q2.push(root->right);
        while(!q1.empty() && !q2.empty()){ 
            //if use || instead of && will occur the error 
            //member access within null pointer of type 'struct TreeNode'
                TreeNode *left=q1.front();
            q1.pop();// miss this will occur Memory Limit Exceeded
                TreeNode *right=q2.front();
            q2.pop();
             if(left!=NULL)
             cout<<"left="<<left->val;
             if(right!=NULL)
             cout<<"    right="<<right->val<<endl;
                if(left==NULL && right==NULL)
                    continue;// if return true will occur [9,-42,-42,null,76,76,null,null,13,null,13]
                if(left==NULL || right==NULL)
                    return false;
                if(left->val!=right->val)
                    return false;
               
                q1.push(left->left);
                q2.push(right->right);
                q1.push(left->right);
                q2.push(right->left);
        }
        return true;
    }
};
