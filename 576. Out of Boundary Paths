class Solution {
   // Brute Force
    // public int findPaths(int m, int n, int N, int i, int j) {
    //     if(i<0 || i>=m || j<0 || j>=n) return 1;
    //     else if(N==0) return 0;
    //     return findPaths(m,n,N-1,i-1,j)+findPaths(m,n,N-1,i,j-1)+findPaths(m,n,N-1,i+1,j)+findPaths(m,n,N-1,i,j+1);
    //    }
        int M=1000000007;
        public int findPaths(int m,int n,int N,int i,int j){
                int [][][] mem=new int[m][n][N+1];
                for(int [][] l:mem){
                    for(int [] s:l){
                        Arrays.fill(s,-1);
                    }
                }
            return findPaths(m,n,N,i,j,mem);
    }
        public int findPaths(int m,int n,int N,int i,int j,int [][][]mem){
            if(i<0 || i>=m || j<0 || j>=n) return 1;
            else if(N==0) return 0;
            if(mem[i][j][N]>-1) return mem[i][j][N];
            mem[i][j][N] =(findPaths(m,n,N-1,i-1,j,mem)%M+findPaths(m,n,N-1,i,j-1,mem)%M+findPaths(m,n,N-1,i+1,j)%M +findPaths(m,n,N-1,i,j+1)%M)%M;
            return mem[i][j][N];
        }
}
