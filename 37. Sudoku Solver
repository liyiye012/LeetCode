class Solution {
public:
    //determine whether the element board[i][j] is valid
    bool check(vector<vector<char>> &board, int i,int j,char val){
        int row=i-i%3,column=j-j%3;// row is the  subbox row index, column is the subbox column index
        for(int x=0;x<9;x++) if(board[x][j]==val) return false;//check the j column
        for(int y=0;y<9;y++) if(board[i][y]==val) return false;//check the i row
        //check the subbox
        for(int x=0;x<3;x++)
            for(int y=0;y<3;y++)
                if(board[row+x][column+y]==val) return false;
        return true;
    }
    //double recursive
    bool solveSudoku(vector<vector<char>> &board,int i,int j){
        //from the left to the right,from the up to the down
        if(i==9) return true;
        if(j==9) return solveSudoku(board,i+1,0);
        if(board[i][j]!='.') return solveSudoku(board,i,j+1);// there has been a element go to next element
        //对于每个需要填数字的格子带入1到9，每代入一个数字都判定其是否合法，如果合法就继续下一次递归，结束时把数字设回'.'
        for(char c='1';c<='9';c++){
            if(check(board,i,j,c)){
                board[i][j]=c;
                if(solveSudoku(board,i,j+1)) return true;
                board[i][j]='.';
            }
        }
        return false;
    }
    void solveSudoku(vector<vector<char>>& board) {
        solveSudoku(board,0,0);
    }
};
