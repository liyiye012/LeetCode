class Solution {
    //my brute force
    public boolean solve1(int[] flowerbed, int n){
         int num=0;
        int len=flowerbed.length;
        if(len==1 && flowerbed[0]==0) num++;
        if(len>1){
            if( flowerbed[1]==0 && flowerbed[0]==0) {
                flowerbed[0]=1;
                num++;
            }
            for(int i=1;i<len-1;i++){
                if(flowerbed[i-1]==0 && flowerbed[i+1]==0 && flowerbed[i]==0)                   {
                    flowerbed[i]=1;
                    num++;
                } 
            }
            if(flowerbed[len-2]==0 && flowerbed[len-1]==0) num++;
        }
        return num>=n;
    }
    //Approach #1 Single Scan
    public boolean solve2(int[] flowerbed, int n){
         int i=0,count=0;
        while(i<flowerbed.length){
            if(flowerbed[i]==0 && (i==0 || flowerbed[i-1]==0) &&(i==flowerbed.length-1 || flowerbed[i+1]==0)){
                flowerbed[i]=1;
                count++;
            }
            i++;
        }
        return count>=n;
    }
        //Approach #2 Optimized
    //stop the process as soon as count ==n
    public boolean solve3(int[] flowerbed, int n){
         int i=0,count=0;
        while(i<flowerbed.length){
            if(flowerbed[i]==0 && (i==0 || flowerbed[i-1]==0) &&(i==flowerbed.length-1 || flowerbed[i+1]==0)){
                flowerbed[i]=1;
                count++;
                
            }
            if(count>=n) return true;
            i++;
        }
        return false;
    }
    
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
       return solve3(flowerbed,n);
    }
}
