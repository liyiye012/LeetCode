class Solution {
public:
    bool possibleBipartition(int N, vector<vector<int>>& dislikes) {
        vector<int> color(N+1,0);// there are 2 colors 1 & -1
        map<int,vector<int>> a1;
        for(auto d:dislikes){
            a1[d[0]].push_back(d[1]);
            a1[d[1]].push_back(d[0]);
        }
        queue<int> q;
        for(auto e:a1){
            if(color[e.first]==0){ // untouched person
                color[e.first]=1;
                q.push(e.first);
                while(!q.empty()){
                    int s=q.front();
                    q.pop();
                    for(auto x:a1[s]){
                        if(color[x]==0){
                           color[x]=-1* color[s];
                           q.push(x);
                        }
                        else if(color[x]!=-1* color[s]) return false;
                         
                    }
                }
            }
        }
        return true;
    }
};
