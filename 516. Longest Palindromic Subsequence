class Solution {
public:
    int longestPalindromeSubseq(string s) {
        //longest[i][j] means for substring between [i,j] inclusive the longest palindromic subsequence
        //If i==j ,longest[i][j] =1
        //If i+1 == j, longest[i][j] =2 if s[i] == s[j]
        //1.s[i] == s[j]
        // dp[i][j] = max(dp[i+1][j], dp[i][j-1], dp[i+1][j-1] +2)
        //2.s[i] != s[j]
        // dp[i][j] = max(dp[i+1][j], dp[i][j-1], dp[i+1][j-1])
        //lhs means left hand side, rhs means right hand side
        if(s.empty()) return 0;
        vector<vector<int>> longest(s.size(), vector<int> (s.size()));
        for(int len=1;len<=s.size(); len++){
            for(int lhs=0;lhs+len<=s.size();lhs++){
                int rhs=lhs+len-1;
                if(lhs==rhs){
                    longest[lhs][rhs]=1;
                }else if(lhs+1==rhs){
                    longest[lhs][rhs]=(s[lhs]== s[rhs] )? 2:1;
                }
                else{
                    int add=s[lhs]== s[rhs] ? 2:0;
                    longest[lhs][rhs]=max(max(longest[lhs][rhs-1],longest[lhs+1][rhs]), longest[lhs+1][rhs-1]+add);
                }
            }
        }
        return longest[0].back();     
        
    }
};
