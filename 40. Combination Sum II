class Solution {
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(),candidates.end());
        std::vector<std::vector<int>> res;
        std::vector<int> combinations;
        int begin=0;
        solve(candidates,target,res,combinations,begin);
        return res;
    }

private:
        void output(vector<int> temp){
            for(int i=0;i<temp.size();i++) cout<<temp[i]<<" ";
            cout<<endl;
        }
        void solve(std::vector<int> &candidates,int target,std::vector<std::vector<int>> &res,std::vector<int> &combinations,int begin){
       // cout<<"call the solve function"<<endl;
        if(!target){
            res.push_back(combinations);
            return ;
                    }
        
        for(int i=begin;i!=candidates.size() && target>=candidates[i];i++){
            if(i>begin && candidates[i]==candidates[i-1]) continue;
            combinations.push_back(candidates[i]);
            solve(candidates,target-candidates[i],res,combinations,i+1);
            combinations.pop_back();
        }
    }
};
