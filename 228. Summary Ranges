class Solution {
public:
    vector<string> summaryRanges(vector<int>& nums) {
        vector<string> result;
        if(nums.empty()) return result;
        int first=nums.at(0);
        int len=nums.size();
        if(len==1){
            result.push_back(to_string(first));\
            return result;
        }
        else if(len==2){
            if(nums.at(1)-nums.at(0)==1)
                result.push_back(to_string(nums.at(0))+"->"+to_string(nums.at(1)));
            else{
                result.push_back(to_string(nums.at(0)));
                result.push_back(to_string(nums.at(1)));
            }
            return result;
        }
        string insert_string;//将要插入的字符串
        int count=1;
        for(int i=1;i<nums.size();i++){
            
            //cout<<"i="<<i<<"  insert_string="<<insert_string<<"  count="<<count<<endl;
            if(first+count!=nums.at(i)){
                if(first==nums.at(i-1))//连续字符串长度只为1
                    result.push_back(to_string(first));
                else {
                    insert_string=to_string(first)+"->"+to_string(nums.at(i-1));
                    result.push_back(insert_string);
                }
                first=nums.at(i);
                count=0;
            }
             if(i==nums.size()-1){//到达字符串末尾
                int j=i;
                while(j>=1 && nums.at(j)-nums.at(j-1)==1)//寻找连续的子字符串
                    j--;
                //cout<<"j="<<j<<endl;
                if(i==j)
                    result.push_back(to_string(nums.at(i)));//连续的子字符串长度为1
                else 
                    result.push_back(to_string(nums.at(j))+"->"+to_string(nums.at(i)));//连续的子字符串长度超过1
            }
            count++;
            //cout<<"i="<<i<<"  insert_string="<<insert_string<<"  count="<<count<<endl<<endl;
        }
        return result;
    }
};
