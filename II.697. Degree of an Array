class Solution {
public:
    void output(unordered_map<int,int> startIndex,unordered_map<int,int> frequency,int fre){
        cout<<"Frequency="<<fre<<endl;
        for(int i=0; i<startIndex.size();i++){
            cout<<"startIndex["<<i<<"]="<<startIndex[i]<<"              frequency["<<i<<"]="<<frequency[i]<<endl;
        }
        cout<<"******************************************"<<endl;
    }
    int findShortestSubArray(vector<int>& nums) {
        /* one records the starting index for the character
            the other records the frequency of the character
       once a certain character's frequency is bigger than others. we update the variable len.
       When more than two character have the same frequency,just compare their length,choose the shorter one.
        */
       if (nums.size() < 2) return nums.size();
        int res = nums.size();
        unordered_map<int, int> startIndex, frequency;
        int len = nums.size(), fre = 0;
        for (int i = 0; i < nums.size() ;i++) {
            cout<<"Before the loop"<<endl<<"*****************************"<<endl;
            output(startIndex,frequency,fre);
            if (startIndex.count(nums[i]) == 0) startIndex[nums[i]] = i;// never appear
            frequency[nums[i]]++;
            if (frequency[nums[i]] == fre){// When more than two character have the same frequency,just compare their length,choose the shorter one.
                len = min(i - startIndex[nums[i]]+ 1, len);// i is the current location, startIndex[nums[i]] is this character first appear location , len is the distance between the character
            }
            if (frequency[nums[i]] > fre){// fre is the degree of the array ,update the degree
                len = i - (startIndex[nums[i]]- 1);
                fre = frequency[nums[i]];
            }
             cout<<"After the loop"<<endl;
            output(startIndex,frequency,fre);
        }
        
        return len;
    }
};
