/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    // Approach #1 Using HashSet
    // public boolean findTarget(TreeNode root, int k) {
    //     Set<Integer> set=new HashSet();
    //     return find(root,k,set);
    // }
    // public boolean find(TreeNode root ,int k,Set<Integer> set){
    //     if(root==null) return false;
    //     if(set.contains(k-root.val)) return true;
    //     set.add(root.val);
    //     return find(root.left,k,set) || find(root.right,k,set);
    // }
    
    // Approach #2 Using BFS and HashSet
    // public boolean findTarget(TreeNode root,int k){
    //     Set<Integer> set=new HashSet();
    //     Queue<TreeNode> queue=new LinkedList();
    //     queue.add(root);
    //     while(!queue.isEmpty()){
    //         if(queue.peek()!=null){
    //             TreeNode node=queue.remove();
    //             if(set.contains(k-node.val)) return true;
    //             set.add(node.val);
    //             queue.add(node.right);
    //             queue.add(node.left);
    //         }else queue.remove();
    //     }
    //     return false;
    // }
    
    // Approach #3 Using BST
    public boolean findTarget(TreeNode root,int k){
        List<Integer> list=new ArrayList();
        inorder(root,list);
        int l=0,r=list.size()-1;
        while(l<r){
            int sum=list.get(l)+list.get(r);
            if(sum==k) return true;
            else if(sum<k) l++;
            else r--;
        }
        return false;
    }
    public void inorder(TreeNode root,List<Integer> list){
        if(root==null) return ;
        inorder(root.left,list);
        list.add(root.val);
        inorder(root.right,list);
    }
}
