class Solution {
public:
    void output(vector<int> dp){
        int n=dp.size();
          cout<<"vector<int>  dp(n+1)"<<endl;
        for(int i=0;i<n+1;i++){
            cout<<dp[i]<<" ";
        }
        cout<<endl;
    }
    int findLength(vector<int>& A, vector<int>& B) {
        /*method 1:
            dp[i][j] : max length of common subarray start at a[i] & b[j];
            dp[i][j] =( a[i] ==b[j] ? dp[i+1][j+1] : 0  );
        */
        int m=A.size(), n=B.size();
        if(!m || !n) return 0;
        vector<int> dp(n+1);
        output(dp);
        int res=0;
        for(int i=m-1;i>=0;i--){
            for(int j=0;j<n;j++){
                res=max(res, dp[j]= A[i]== B[j] ? 1+dp[j+1]: 0);
                cout<<"res="<<res<<"  i="<<i<<"  j="<<j<<"   A[i]="<<A[i]<<"   B[j]="<<B[j]<<"  dp[j]="<<dp[j]<<endl;
            }
            cout<<endl;
        }
        output(dp);
        return res;
        
    }
};
