class Solution {
public:
    double myPow(double x, int n) {
        /*
        Consider the binary representation of n. For example, 
        if it is "10001011", then x^n = x^(1+2+8+128) = x^1 * x^2 * x^8 * x^128. 
        Thus, we don't want to loop n times to calculate x^n. 
        To speed up, we loop through each bit, if the i-th bit is 1, 
        then we add x^(1 << i) to the result. Since (1 << i) is a power of 2, 
        x^(1<<(i+1)) = square(x^(1<<i)). The loop executes for a maximum of log(n) times.
        */
        double ans=1;
        unsigned long long p;
        if(n<0){
            p=-n;
            x=1/x;
        }else {
            p=n;
        }
        while(p){
            if(p &1)
                ans *=x;// ans *= x^(2^p)
            x*=x;
            p>>=1;// p/2
        }
        return ans;
    }
};
